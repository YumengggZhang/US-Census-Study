# -*- coding: utf-8 -*-
"""Final_project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aCm5DjnhF3Yp6Q7tPmXuE32W1cf7oUZk
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import itertools
import matplotlib.pyplot as plt
import numpy as np

df = pd.read_csv('/content/drive/MyDrive/InfoViz Treemap/Geocoded_Manhattan.csv')
# contry_list = pd.read_csv('/content/drive/MyDrive/InfoViz Treemap/c_c.csv')

df["Father's Birthplace"].unique()

len(df.groupby(by='Occupation',as_index=0)['DataID'].count())

US = ['Mississippi','New Jersey', 'US', 'Louisiana', 'Ohio','Texas','South Carolina','Virginia', 'Maryland', 'Michigan',
            'Connecticut','North Carolina', 'Missouri','Maine','Kansas', 'Kentucky','Rhode Island', 'Georgia','Vermont','California',
            'Wisconsin', 'Minnesota', 'Oregon','Utah', 'Iowa', 'Indiana', 'DC', 'Illinois', 'West Virginia','Alabama', 'Tennessee', 
            'Delaware', 'Arkansas','New Hampshire', 'New Mexico','Philadelphia','Florida', 'Colorado','Massachusetts','New York',
            'Puerto Rico','Washington','South Dakota','Boston','Gibraltar','Nebraska','Chicago','Colombia','Central America','Pennsylvania',
            'New Orleans','Bermuda']
Canada = ['Newfoundland','Nova Scotia','Montana','Canada']
UK = ['England','Scotland','Wales']
Russia = ['Serbia','Armenia','Poland','Croatia']
Europe = ['Germany', 'Turkey','Lithuania','Hungary', 'Sweden', 'Russia','Greece', 'Norway', 'Syria','Ireland', 'Italy','France', 'Finland', 
          'Switzerland','Denmark','Romania','Rumania','Spain','Portugal','Bulgaria','Bohemia','Luxembourg','Prussia','Jerusalem','Crete','Sicily',
          'England','Scotland','Wales','Austria','Serbia','Armenia','Poland','Croatia','Galicia','Bavaria','Belgium','Holland']
Oceania = ['Australia']
NorthAmerica = ['Newfoundland','Nova Scotia','Montana','Bermuda','New Orleans','Canada']      
SouthAmerica = ['Barbados','Cuba','Mexico','Peru','Jamaica','Argentina','Venezuela','Brazil','West Indies']             
Aisa = ['China','Japan','Palestine','India','Arabia','Asia']
Africa = ['Egypt','South Africa','Africa']

Canada

df_immigrant = df[df["Father's Birthplace"].isin(US)==False]
df_immigrant = df_immigrant[df_immigrant["Father's Birthplace"].isin(['At Sea', 'Ata','Other','Blank'])==False]
df_immigrant = df_immigrant[df_immigrant.isna()==False]
df_immigrant.shape

occupation_lissy = df_immigrant.groupby(by='Occupation',as_index=0)['DataID'].count().sort_values(by='DataID',ascending=0)[:30]['Occupation'].to_list()
occupation_lissy

df_final = df_immigrant[df_immigrant['Occupation'].isin(occupation_lissy)]
df_final = df_final[['DataID','Gender','Race','Age',"Father's Birthplace",'Occupation','Can Read',
       'Can Write', 'Attended School']]
df_final['continent'] = np.where(df_final["Father's Birthplace"].isin(Europe),'Europe',df_final["Father's Birthplace"])
df_final['continent'] = np.where(df_final["Father's Birthplace"].isin(NorthAmerica),'NorthAmerica',df_final['continent'])
df_final['continent'] = np.where(df_final["Father's Birthplace"].isin(Oceania),'Oceania',df_final['continent'])
df_final['continent'] = np.where(df_final["Father's Birthplace"].isin(SouthAmerica),'SouthAmerica',df_final['continent'])
df_final['continent'] = np.where(df_final["Father's Birthplace"].isin(Aisa),'Aisa',df_final['continent'])
df_final['continent'] = np.where(df_final["Father's Birthplace"].isin(Africa),'Africa',df_final['continent'])

df_final['continent']

df_final

df_final[df_final['Occupation'].isin(occupation_lissy)].groupby(by=['continent'],as_index=0)['DataID'].count().sort_values(by='DataID',ascending=0)

# df_plot = df_final[(df_final['continent']!='Europe')]
df_plot = df_final.copy()
df_plot = df_plot[df_plot['continent'].isna()==False]

df_plot

paperworker = ['Stenographer','Bookkeeper','Clerk','Printer','Stenographer']
engineer = ['Machinist','Engineer']
workers = ['Plumber','Electrician','Cigar Maker','Finisher','Laborer','Laundress','Cook','Porter','Packer','Operator','Presser','Cutter']
artist = ['Painter','Musician']
Proprietor = ['Proprietor','Baker','Barber','Cigar Maker','Merchant','Butcher','Milliner','Dressmaker','Tailor','Shoemaker','Carpenter','Peddler']
servant = ['Waiter','Bartender','Nurse','Driver','Cleaner','Janitor','Servant','Maid','Waitress','poter','Porter','Saleslady','Housework','Salesman']

df_plot['industry'] = np.where(df_plot["Occupation"].isin(paperworker),'paperworker',df_plot["Occupation"])
df_plot['industry'] = np.where(df_plot["Occupation"].isin(engineer),'engineer',df_plot['industry'])
df_plot['industry'] = np.where(df_plot["Occupation"].isin(workers),'workers',df_plot['industry'])
df_plot['industry'] = np.where(df_plot["Occupation"].isin(artist),'artist',df_plot['industry'])
df_plot['industry'] = np.where(df_plot["Occupation"].isin(Proprietor),'Proprietor',df_plot['industry'])
df_plot['industry'] = np.where(df_plot["Occupation"].isin(servant),'servant',df_plot['industry'])

df['Occupation'].unique()[:50]

df_plot.columns

df_plot.columns = ['DataID', 'Gender', 'Race', 'Age', 'Birthplace', 'Occupation',
       'CanRead', 'CanWrite', 'AttendedSchool', 'continent', 'industry']

df_plot['count'] = 1
df_plot['educationLevel'] = ''

df_plot['educationLevel'] = np.where((df_plot['CanRead']=='Yes')&(df_plot['CanWrite']=='Yes'),'read & write',df_plot['educationLevel'])
df_plot['educationLevel'] = np.where((df_plot['CanRead']=='Yes')&(df_plot['CanWrite']=='No'),'only read',df_plot['educationLevel'])
df_plot['educationLevel'] = np.where((df_plot['CanRead']=='No')&(df_plot['CanWrite']=='No'),'illiterate',df_plot['educationLevel'])

df_plot

df_europe = df_plot[df_plot['continent']=='Europe']

df_rest = df_plot[df_plot['continent']!='Europe']

df_plot_Europe_sample = df_europe.sample(frac=0.05, replace=False, random_state=1)

df_plot_Europe_sample = df_plot_Europe_sample[['Gender','Birthplace', 'Occupation','continent', 'industry','count', 'educationLevel']]

df_rest = df_rest[['Gender','Birthplace', 'Occupation','continent', 'industry','count', 'educationLevel']]

df_final = pd.concat([df_plot_Europe_sample,df_rest])
df_final

df_final.to_csv('/content/drive/MyDrive/Info_visual_fnl_Project/sample_data_v1.csv')

